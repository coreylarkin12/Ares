
Introduction to Tools Exercises
-------------------------------

The following exercises cover Git, and several Unix commands typically used
alongside Git. They are intended to help you gain familiarity and build 
confidence while on the command line inside the Terminal.

The exercise folder contains this file, plus a csharp-helloworld folder.  The
csharp-helloworld folder represents a simplified C# project. (The layout of an
actual C# project will be covered in later lectures.) For now, the reduced 
structure provides an opportunity to navigate between folders, and to work with
files as you would in an actual C# project, but cleared of much of the 
clutter found in real projects.


----
1.  To begin, open your terminal, and enter the following command to change 
    directory to the exercise folder.
----

$ cd ~/exercises/m1-w1d1-intro-to-tools-exercises/csharp-helloworld

Note, do not enter the beginning "$" character. It represents the prompt for 
the command line. This convention is commonly used to visually seperate the 
actual command from other text in Unix documentation.


----
2.  What does the ~ (tilde) character in the above command to change directory 
    refer to?
----
goes back to home folder


----
3.  A good habit to develop, especially while you're developing your skills on 
    the command line, is to confirm your location after changing directories. 
    This can be easily accomplished with the "pwd" command.
----

$ pwd
<type or copy-paste the result here>

clarkin@DESKTOP-4EOMNFH MINGW64 ~/coreylarkin-c-exercises/M1W1D1-introduction-to-tools-exercises/csharp-helloworld (master)


The present working directory displayed should match the directory you changed 
to in Exercise 1.  Note, the two may not match at the very beginning if you
used the tilde when changing directories.  The tilde is a conveniece to save 
you some typing.  The system resolves the tilde to the full location as it
changes directory, and the "pwd" command reflects this.


----
4.  Display a list of all the files and folders in your present working 
    directory. Include all dot-files and dot-folders.  Recall the "all" and
    "long format" flags for the "ls" command.
----

$ ls -la
<type or copy-paste the result here>

$ ls -la
total 12
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 ./
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 ../
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 database/
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 Helloworld/
-rw-r--r-- 1 clarkin 197121 997 May  8 16:02 Helloworld.sln



----
5.  What do the "." and ".." folders displayed in the directory listing in
    Exercise 4 represent?
----

<type or copy-paste your answer here>parent and child

----
6.  What are the names of the files, including any dot-files, displayed in the
    directory listing in Exercise 4?
----

<type or copy-paste your answer here>


----
7.  What are the names of the folders, including any dot-folders, displayed in 
    the directory listing in Exercise 4?
----

./ ../ database/ Helloworld/ 


----
8.  Helloworld.sln is a Visual Studio project file. You will learn more about project files in later 
    lectures. As for the exercise, it is sometimes necessary, and usually 
    always interesting to be able to view the contents of files while at the
    command line. A friendly and easy-to-use utility that allows you to do this
    is "less".  
    
    "less" has two great features. First, it is a file viewer. You never have 
    to worry about accidently modifying the file, as you would if you opened it 
    in an editor.  Second, it allows you to page-up, page-down, search, and 
    perform other nifty navigations which are really useful when files are big.

    View Helloworld.sln using "less".  

    Or, for the more adventuresome, you might want to try using "less" with a huge
    file like database/pagila.sql where the utility's navigation features really
    shine.

    Press Q to quit when you wish to stop viewing either of the files.
----

$ less Helloworld.sln

Or

$ less database/pagila.sql

You are encouraged to make "less" part of your standard command line toolkit.


----
9.  This is good time to make a Git snapshot of your progress.  Usually, 
    you'll want to check the Git status to review the list of files that
    have been changed, added, or deleted.  Then you'll want to add and commit
    those changes to your local repository.

    Don't forget to save your current changes to this text file to disk before
    making the snapshot.
----

Did you remember to save "introduction-to-tools-exercise.txt"?

$ git status
<type or copy-paste the result here>

      modified:   introduction-to-tools-exercises.txt


$ git add .
<type or copy-paste the result here>

warning: unable to access '“c:/user/clarkin/.gitignore_global.txt”': Invalid argument



$ git commit -m "Good stopping point"
<type or copy-paste the result here>
cd
$ git commit -m "Good Stopping point"
[master cc5d135] Good Stopping point
 1 file changed, 13 insertions(+), 1 deletion(-)


Note, you do not need to push this commit up to BitBucket. The typical Git 
workflow is to make many small commits to your local repo, with pushes up to 
BitBucket when a feature, fix, or in this case, assignment is finished.  


----
10.  Change into Helloworld directory under csharp-helloworld.
    Show your present working directory after the change.
----

$ cd Helloworld
$ <enter command to display present working directory>
<type or copy-paste your present working directory here>

/c/Users/clarkin/coreylarkin-c-exercises/M1W1D1-introduction-to-tools-exercises/csharp-helloworld


----
11. Does the change directory command in Exercise 10 use a relative, or absolute
    path?
----

<type your answer here>absolute


----
12. List all the files and folders, including any dot-files or dot-folders in
    your present working directory.
----

total 12
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 ./
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 ../
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 database/
drwxr-xr-x 1 clarkin 197121   0 May  8 16:02 Helloworld/
-rw-r--r-- 1 clarkin 197121 997 May  8 16:02 Helloworld.sln


$ <enter command to list all files and folders including dot-files and dot-folders>
<type or copy-paste the result here>


----
13. "Program.cs" is the sole source code file of the Helloworld application.
    Make a backup of the file named "Program.cs.backup" using the copy 
    command.
----

$ cp Program.cs Helloworld.cs.backup

The "cp" parameters are the name of the source file followed by the name of the 
destination file. 

$ <enter command to list all files and folders in order to confirm the creation of the backup file>
<type or copy-paste the result here>

App.config  Helloworld.cs.backup  Helloworld.csproj  Program.cs  Properties/


----    
14. Rename "Program.cs.backup" to "Program.cs.copy" using the move 
    command. (There is no rename command in UNIX.)
----

$ mv Program.cs.backup Program.cs.copy

The "mv" parameters are the existing name of the file followed by the new name 
of the file. 

$ <enter command to list all files and folders in order to confirm the renaming of the file>
<type or copy-paste the result here>

App.config  Helloworld.csproj  Program.cs  Program.cs.copy  Properties/

----
15. Let's call this a "feature completion" point in the exercises, and not only
    checkin to the local repository, but also push it up to BitBucket. 
----

$ <enter the Git command to display status>
<type or copy-paste the result here>  modified:   M1W1D1-introduction-to-tools-exercises/introduction-to-tools-exercises.txt


$ <enter the Git command to "stage" all changes>
<type or copy-paste the result here>[master b8bef19] Feature Completion
 2 files changed, 43 insertions(+), 1 deletion(-)
 create mode 100644 M1W1D1-introduction-to-tools-exercises/csharp-helloworld/Helloworld/Program.cs.copy



$ <enter the Git command to save all "staged" changes>
<type or copy-paste the result here>
[master b8bef19] Feature Completion
 2 files changed, 43 insertions(+), 1 deletion(-)
 create mode 100644 M1W1D1-introduction-to-tools-exercises/csharp-helloworld/Helloworld/Program.cs.copy


$ git push
<type or copy-paste the result here>

$ git push origin master
Counting objects: 24, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (22/22), done.
Writing objects: 100% (24/24), 696.99 KiB | 0 bytes/s, done.
Total 24 (delta 4), reused 0 (delta 0)
To https://bitbucket.org/te-cbus-cohort-2/coreylarkin-c-exercises.git

----
16. Delete the backup file, "Program.cs.copy" using the remove command.
----

$ rm Program.cs.copy

The "rm" parameter is the name of the file to be deleted.

$ <enter command to list all files and folders in order to confirm the file deletion>
<type or copy-paste the result here>


----
17. Change directory to the csharp-helloworld folder using either one of the 
    commands shown below.
----

$ cd ..

or

$ cd ~/exercises/m1-w1d1-intro-to-tools-exercises/csharp-helloworld

Note the first alternative relies upon the ".." parent folder notation.  In 
essence it says to change directory from the current folder's parent's parent's
parent's parent's parent.  You'll know you're getting comfortable at the
command line when that seems natural.

Regardless of the option you chose, check your new location.

$ <enter command to display present working directory>
<type or copy-paste your present working directory here>
/c/Users/clarkin/coreylarkin-c-exercises/M1W1D1-introduction-to-tools-exercises/csharp-helloworld


----
18. Create a documentation folder named "docs" under csharp-helloworld, and then
    change into it.
----

$ mkdir docs
$ <enter the command to change directory to "docs" using a relative path>
$ <enter command to display present working directory>
<type or copy-paste your present working directory here>
/c/Users/clarkin/coreylarkin-c-exercises/M1W1D1-introduction-to-tools-exercises/csharp-helloworld/docs
----
19. Create a new file name "readme.txt" using Notepad, and add the text
    "Hello, this is the beginning of the application's documentation."
----

$ notepad readme.txt

Don't forget to save the file in Notepad!


----
20. As a final exercise, please perform the following commands to save and push your 
    work so it can be reviewed by an instructor.
----

$ <enter the Git command to display status>git status

$ <enter the Git command to "stage" all changes>

$ <enter the Git command to save all "staged" changes>[master 2ba6ee3] Final Exercise
 3 files changed, 22 insertions(+), 20 deletions(-)
 delete mode 100644 M1W1D1-introduction-to-tools-exercises/csharp-helloworld/Helloworld/Program.cs.copy
 create mode 100644 M1W1D1-introduction-to-tools-exercises/csharp-helloworld/docs/readme.txt



$ <enter the Git command to save local repository to BitBucket>git push origin master
